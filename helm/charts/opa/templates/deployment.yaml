{{- $releaseName := .Release.Name -}}
{{- $chartName := include "opa.name" . -}}
{{- $cloudProviderFlavor := include "opa.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "opa.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "opa.cloudProviderImagePullSecretName" . -}}
{{- $imageTag := include "opa.tag" . -}}
{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    release: {{ $releaseName }}
    {{- include "opa.labels" . | nindent 4 }}
spec:
  {{ if not (.Values.hpa.enabled) -}}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "opa.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "opa.labels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- toYaml .Values.podLabels | nindent 8}}
        {{- end }}
      annotations:
        {{ include "mc-labels-and-annotations.annotations" . | nindent 8 }}
        {{- if .Values.resetOnConfigChange }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.additionalPodAnnotations }}
        {{- toYaml .Values.additionalPodAnnotations | nindent 8}}
        {{- end }}
    spec:
    {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
    {{- end }}
      volumes:
        {{- if .Values.ca.enabled }}
        - name: root-ca
          secret:
            secretName: {{ .Values.ca.secretName }}
        {{- end }}
        - name: opa-configfile
          configMap:
            name: {{ .Release.Name }}-{{ $chartName }}-configmap
            items:
            - key: "OPA_CONFIG"
              path: "opa-config.yaml"
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          {{- end }}
          volumeMounts:
          {{- if .Values.ca.enabled }}
          - name: root-ca
            mountPath: {{ printf "%s/%s" .Values.ca.path .Values.ca.key | quote }}
            subPath: {{ .Values.ca.key | quote }}
          {{- end }}
          - name: opa-configfile
            mountPath: /etc/opa-config.yaml
            readOnly: true
            subPath: opa-config.yaml
          args:
          - "run"
          - "--server"
          - "--addr=0.0.0.0:{{ .Values.targetPort }}"
          - "--diagnostic-addr=0.0.0.0:{{ .Values.diagnosticTargetPort }}"
          - "--log-level={{ .Values.logLevel }}"
          - "--config-file"
          - "/etc/opa-config.yaml"
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.secretName | quote }}
                  key: accessKeyId
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.secretName | quote }}
                  key: secretAccessKey
            - name: AWS_REGION
              value: ' ' # Region is hardcoded since we don't use real AWS S3          
            {{- if .Values.ca.enabled }}
            - name: SSL_CERT_FILE
              value: {{ printf "%s/%s" .Values.ca.path .Values.ca.key | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health?plugins
              port: {{ .Values.diagnosticTargetPort }}
            initialDelaySeconds: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health?plugins
              port: {{ .Values.diagnosticTargetPort }}
            initialDelaySeconds: 5
            periodSeconds: 30          
{{- end -}}
