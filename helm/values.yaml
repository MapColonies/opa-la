global:
  cloudProvider: {}
  tracing: {}
  metrics: {}

configServerUrl: &configServerUrl 'http://localhost/api'
offlineMode: &configOfflineMode false

cloudProvider: &cloudProvider
  dockerRegistryUrl: my-registry-url.io
  imagePullSecretName: 'my-registry-secret'
  flavor: openshift

ca: &ca
  enabled: false
  secretName: 'root-ca'
  path: '/usr/local/share/ca-certificates'
  key: 'ca.crt'

host: &host ''
tls: &tls
  useCerts: false
  certificate: ''
  key: ''
  caCertificate: ''

opa:
  enabled: true
  cloudProvider: *cloudProvider
  ca: *ca
  image:
    repository: openpolicyagent/opa

  s3:
    endpoint: http://localhost:9000/opa
    secretName: s3-secret
    filePath: '/dev.tar.gz'

  hpa:
    enabled: true

  route:
    enabled: true
    host: *host
    path: /opa
    tls: *tls

auth-cron:
  enabled: true
  cloudProvider: *cloudProvider
  ca: *ca
  image:
    repository: infra/auth-cron

  configManager:
    offlineMode: *configOfflineMode
    serverUrl: *configServerUrl
    name: 'infra-auth-cron'

auth-manager:
  enabled: true
  cloudProvider: *cloudProvider
  ca: *ca
  image:
    repository: infra/auth-manager

  configManager:
    offlineMode: *configOfflineMode
    serverUrl: *configServerUrl
    name: 'infra-auth-manager'

  route:
    enabled: true
    host: *host
    path: /api
    tls: *tls

auth-ui:
  enabled: true
  cloudProvider: *cloudProvider
  ca: *ca
  image:
    repository: infra/auth-ui
  config: |
    {
      "Local": {
        "name": "localhost",
        "url": "https://infra-opala-auth-manager",
        "envs": [
          {
            "envKey": "prod",
            "opaUrl": "https://infra-opala-opa-service"
          }
        ]
      }
    }
  route:
    enabled: true
    host: *host
    tls: *tls

token-kiosk:
  enabled: true
  cloudProvider: *cloudProvider
  ca: *ca
  image:
    repository: infra/token-kiosk
  configManager:
    offlineMode: *configOfflineMode
    serverUrl: *configServerUrl
    name: 'infra-token-kiosk'
