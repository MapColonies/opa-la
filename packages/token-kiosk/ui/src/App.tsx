// Generated by Copilot
import { useState, useEffect } from 'react';
import './App.css';

/**
 * User information interface matching the OpenAPI schema
 */
interface UserInfo {
  sub: string;
  name?: string;
  givenName?: string;
  familyName?: string;
  middleName?: string;
  nickname?: string;
  preferredUsername?: string;
  email?: string;
  gender?: string;
  phoneNumber?: string;
}

/**
 * Authentication states for the application
 */
const AUTH_STATES = {
  LOADING: 'loading',
  AUTHENTICATED: 'authenticated',
  UNAUTHENTICATED: 'unauthenticated',
  ERROR: 'error',
} as const;

type AuthState = (typeof AUTH_STATES)[keyof typeof AUTH_STATES];

/**
 * Main application component that handles authentication and user display
 */
function App() {
  const [authState, setAuthState] = useState<AuthState>(AUTH_STATES.LOADING);
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
  const [error, setError] = useState<string | null>(null);

  /**
   * Fetch current user information from the API
   */
  const fetchUserInfo = async (): Promise<void> => {
    try {
      const response = await fetch('/api/auth/me', {
        method: 'GET',
        credentials: 'include', // Include cookies for session
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const user: UserInfo = await response.json();
        setUserInfo(user);
        setAuthState(AUTH_STATES.AUTHENTICATED);
      } else if (response.status === 401) {
        // User is not authenticated
        setAuthState(AUTH_STATES.UNAUTHENTICATED);
      } else {
        throw new Error(`Failed to fetch user info: ${response.statusText}`);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      setError(errorMessage);
      setAuthState(AUTH_STATES.ERROR);
    }
  };

  /**
   * Handle user login action
   */
  const handleLogin = (): void => {
    // The express-openid-connect middleware handles the login redirect
    window.location.href = '/login';
  };

  /**
   * Check authentication status on component mount
   */
  useEffect(() => {
    fetchUserInfo();
  }, []);

  /**
   * Render loading state
   */
  if (authState === AUTH_STATES.LOADING) {
    return (
      <div className="App">
        <div className="loading">
          <h2>Loading...</h2>
          <p>Checking authentication status...</p>
        </div>
      </div>
    );
  }

  /**
   * Render error state
   */
  if (authState === AUTH_STATES.ERROR) {
    return (
      <div className="App">
        <div className="error">
          <h2>Error</h2>
          <p>{error}</p>
          <button onClick={() => window.location.reload()}>Retry</button>
        </div>
      </div>
    );
  }

  /**
   * Render login screen for unauthenticated users
   */
  if (authState === AUTH_STATES.UNAUTHENTICATED) {
    return (
      <div className="App">
        <div className="login-screen">
          <h1>Token Kiosk</h1>
          <p>Welcome to the Token Kiosk authentication service.</p>
          <p>Please log in to access your user information.</p>
          <button onClick={handleLogin} className="login-button">
            Login
          </button>
        </div>
      </div>
    );
  }

  /**
   * Render authenticated user dashboard
   */
  if (authState === AUTH_STATES.AUTHENTICATED && userInfo) {
    return (
      <div className="App">
        <header className="app-header">
          <h1>Token Kiosk Dashboard</h1>
        </header>

        <main className="user-info">
          <h2>Welcome, {userInfo.name || userInfo.preferredUsername || 'User'}!</h2>

          <div className="user-details">
            <h3>User Information</h3>
            <div className="user-field">
              <strong>User ID:</strong> {userInfo.sub}
            </div>

            {userInfo.name && (
              <div className="user-field">
                <strong>Full Name:</strong> {userInfo.name}
              </div>
            )}

            {userInfo.givenName && (
              <div className="user-field">
                <strong>First Name:</strong> {userInfo.givenName}
              </div>
            )}

            {userInfo.familyName && (
              <div className="user-field">
                <strong>Last Name:</strong> {userInfo.familyName}
              </div>
            )}

            {userInfo.email && (
              <div className="user-field">
                <strong>Email:</strong> {userInfo.email}
              </div>
            )}

            {userInfo.preferredUsername && (
              <div className="user-field">
                <strong>Username:</strong> {userInfo.preferredUsername}
              </div>
            )}

            {userInfo.phoneNumber && (
              <div className="user-field">
                <strong>Phone:</strong> {userInfo.phoneNumber}
              </div>
            )}
          </div>
        </main>
      </div>
    );
  }

  // Fallback - should not reach here
  return null;
}

export default App;
