{{- $releaseName := .Release.Name -}}
{{- $chartName := include "auth-manager.name" . -}}
{{- $cloudProviderDockerRegistryUrl := include "auth-manager.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "auth-manager.cloudProviderImagePullSecretName" . -}}
{{- $imageTag := include "auth-manager.tag" . -}}
{{ $postgresSecretName := ternary .Values.dbConfig.secretName (printf "%s%s" .Release.Name "-postgres-secret") .Values.dbConfig.useExternalSecret }}
{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    release: {{ $releaseName }}
    {{- include "auth-manager.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "auth-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "auth-manager.labels" . | nindent 8 }}
      annotations:
        {{ include "mc-labels-and-annotations.annotations" . | nindent 8 }}
        {{- if .Values.resetOnConfigChange }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.additionalPodAnnotations }}
        {{- toYaml .Values.additionalPodAnnotations | nindent 8}}
        {{- end }}
      {{- end }}
    spec:
    {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
    {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          {{- end }}
          volumeMounts:
            {{- if .Values.ca.enabled }}
            - mountPath: {{ printf "%s/%s" .Values.ca.path .Values.ca.key | quote }}
              name: root-ca
              subPath: {{ quote .Values.ca.key }}
            {{- end }}
            {{- if .Values.dbConfig.sslAuth.enabled }}
            - name: ca-file
              mountPath: /tmp/certs/{{ .Values.dbConfig.sslAuth.caFileName }}
              subPath: {{ .Values.dbConfig.sslAuth.caFileName }}
            - name: key-file
              mountPath: /tmp/certs/{{ .Values.dbConfig.sslAuth.keyFileName }}
              subPath: {{ .Values.dbConfig.sslAuth.keyFileName }}
            - name: cert-file
              mountPath: /tmp/certs/{{ .Values.dbConfig.sslAuth.certFileName }}
              subPath: {{ .Values.dbConfig.sslAuth.certFileName }}
            {{- end }}            
          env:
            {{- if .Values.env.configManager.offlineMode }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: username
            {{- if not .Values.dbConfig.sslAuth.enabled }}               
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: password
            {{- end }}
            {{- end }}
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            {{- if .Values.ca.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.ca.path .Values.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "%s/%s" .Values.ca.path .Values.ca.key | quote }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- toYaml .Values.extraEnvVars | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ $releaseName }}-{{ $chartName }}-configmap
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: {{ .Values.env.targetPort }}
              httpHeaders:
                - name: Access-Control-Allow-Origin
                  value: "*"
                - name: Access-Control-Allow-Methods
                  value: "GET, OPTIONS"
                - name: Access-Control-Allow-Headers
                  value: "Content-Type, Authorization"
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.ca.enabled }}
        - name: root-ca
          secret:
            secretName: {{ .Values.ca.secretName }}
        {{- end }}
        {{- if .Values.dbConfig.sslAuth.enabled }}
        - name: ca-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: {{ .Values.dbConfig.sslAuth.caFileName }}
                path: ca.crt
        - name: key-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: {{ .Values.dbConfig.sslAuth.keyFileName }}
                path: key.pem
        - name: cert-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: {{ .Values.dbConfig.sslAuth.certFileName }}
                path: cert.pem
        {{- end }}
{{- end -}}
